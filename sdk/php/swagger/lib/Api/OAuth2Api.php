<?php
/**
 * OAuth2Api
 * PHP version 5
 *
 * @category Class
 * @package  keto\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Package main ORY Keto
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace keto\SDK\Api;

use \keto\SDK\ApiClient;
use \keto\SDK\ApiException;
use \keto\SDK\Configuration;
use \keto\SDK\ObjectSerializer;

/**
 * OAuth2Api Class Doc Comment
 *
 * @category Class
 * @package  keto\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OAuth2Api
{
    /**
     * API Client
     *
     * @var \keto\SDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \keto\SDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\keto\SDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \keto\SDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \keto\SDK\ApiClient $apiClient set the API client
     *
     * @return OAuth2Api
     */
    public function setApiClient(\keto\SDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation acceptOAuth2ConsentRequest
     *
     * Accept a consent request
     *
     * Client for keto
     *
     * @param string $id  (required)
     * @param \keto\SDK\Model\ConsentRequestAcceptance $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function acceptOAuth2ConsentRequest($id, $body)
    {
        list($response) = $this->acceptOAuth2ConsentRequestWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation acceptOAuth2ConsentRequestWithHttpInfo
     *
     * Accept a consent request
     *
     * Client for keto
     *
     * @param string $id  (required)
     * @param \keto\SDK\Model\ConsentRequestAcceptance $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptOAuth2ConsentRequestWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling acceptOAuth2ConsentRequest');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling acceptOAuth2ConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/consent/requests/{id}/accept";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/consent/requests/{id}/accept'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOAuth2Client
     *
     * Create an OAuth 2.0 client
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\OAuth2Client $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OAuth2Client
     */
    public function createOAuth2Client($body)
    {
        list($response) = $this->createOAuth2ClientWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createOAuth2ClientWithHttpInfo
     *
     * Create an OAuth 2.0 client
     *
     * Client for keto
     *
     * @param \keto\SDK\Model\OAuth2Client $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOAuth2ClientWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OAuth2Client',
                '/clients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOAuth2Client
     *
     * Deletes an OAuth 2.0 Client
     *
     * Client for keto
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteOAuth2Client($id)
    {
        list($response) = $this->deleteOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOAuth2ClientWithHttpInfo
     *
     * Deletes an OAuth 2.0 Client
     *
     * Client for keto
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOAuth2ClientWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/clients/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOAuth2Client
     *
     * Retrieve an OAuth 2.0 Client.
     *
     * Client for keto
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OAuth2Client
     */
    public function getOAuth2Client($id)
    {
        list($response) = $this->getOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOAuth2ClientWithHttpInfo
     *
     * Retrieve an OAuth 2.0 Client.
     *
     * Client for keto
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuth2ClientWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OAuth2Client',
                '/clients/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOAuth2ConsentRequest
     *
     * Receive consent request information
     *
     * Client for keto
     *
     * @param string $id The id of the OAuth 2.0 Consent Request. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OAuth2ConsentRequest
     */
    public function getOAuth2ConsentRequest($id)
    {
        list($response) = $this->getOAuth2ConsentRequestWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOAuth2ConsentRequestWithHttpInfo
     *
     * Receive consent request information
     *
     * Client for keto
     *
     * @param string $id The id of the OAuth 2.0 Consent Request. (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OAuth2ConsentRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuth2ConsentRequestWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOAuth2ConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/consent/requests/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OAuth2ConsentRequest',
                '/oauth2/consent/requests/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OAuth2ConsentRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OAuth2ConsentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWellKnown
     *
     * Server well known configuration
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\WellKnown
     */
    public function getWellKnown()
    {
        list($response) = $this->getWellKnownWithHttpInfo();
        return $response;
    }

    /**
     * Operation getWellKnownWithHttpInfo
     *
     * Server well known configuration
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\WellKnown, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWellKnownWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/.well-known/openid-configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\WellKnown',
                '/.well-known/openid-configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\WellKnown', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\WellKnown', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation introspectOAuth2Token
     *
     * Introspect OAuth2 tokens
     *
     * Client for keto
     *
     * @param string $token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation. (required)
     * @param string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OAuth2TokenIntrospection
     */
    public function introspectOAuth2Token($token, $scope = null)
    {
        list($response) = $this->introspectOAuth2TokenWithHttpInfo($token, $scope);
        return $response;
    }

    /**
     * Operation introspectOAuth2TokenWithHttpInfo
     *
     * Introspect OAuth2 tokens
     *
     * Client for keto
     *
     * @param string $token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation. (required)
     * @param string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OAuth2TokenIntrospection, HTTP status code, HTTP response headers (array of strings)
     */
    public function introspectOAuth2TokenWithHttpInfo($token, $scope = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling introspectOAuth2Token');
        }
        // parse inputs
        $resourcePath = "/oauth2/introspect";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        // form params
        if ($scope !== null) {
            $formParams['scope'] = $this->apiClient->getSerializer()->toFormValue($scope);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OAuth2TokenIntrospection',
                '/oauth2/introspect'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OAuth2TokenIntrospection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OAuth2TokenIntrospection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOAuth2Clients
     *
     * List OAuth 2.0 Clients
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OAuth2Client[]
     */
    public function listOAuth2Clients()
    {
        list($response) = $this->listOAuth2ClientsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listOAuth2ClientsWithHttpInfo
     *
     * List OAuth 2.0 Clients
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OAuth2Client[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOAuth2ClientsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/clients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OAuth2Client[]',
                '/clients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OAuth2Client[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OAuth2Client[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation oauthAuth
     *
     * The OAuth 2.0 authorize endpoint
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function oauthAuth()
    {
        list($response) = $this->oauthAuthWithHttpInfo();
        return $response;
    }

    /**
     * Operation oauthAuthWithHttpInfo
     *
     * The OAuth 2.0 authorize endpoint
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthAuthWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/oauth2/auth";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/auth'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation oauthToken
     *
     * The OAuth 2.0 token endpoint
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\InlineResponse2001
     */
    public function oauthToken()
    {
        list($response) = $this->oauthTokenWithHttpInfo();
        return $response;
    }

    /**
     * Operation oauthTokenWithHttpInfo
     *
     * The OAuth 2.0 token endpoint
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthTokenWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/oauth2/token";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\InlineResponse2001',
                '/oauth2/token'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rejectOAuth2ConsentRequest
     *
     * Reject a consent request
     *
     * Client for keto
     *
     * @param string $id  (required)
     * @param \keto\SDK\Model\ConsentRequestRejection $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function rejectOAuth2ConsentRequest($id, $body)
    {
        list($response) = $this->rejectOAuth2ConsentRequestWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation rejectOAuth2ConsentRequestWithHttpInfo
     *
     * Reject a consent request
     *
     * Client for keto
     *
     * @param string $id  (required)
     * @param \keto\SDK\Model\ConsentRequestRejection $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectOAuth2ConsentRequestWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling rejectOAuth2ConsentRequest');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling rejectOAuth2ConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/consent/requests/{id}/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/consent/requests/{id}/reject'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeOAuth2Token
     *
     * Revoke OAuth2 tokens
     *
     * Client for keto
     *
     * @param string $token  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return void
     */
    public function revokeOAuth2Token($token)
    {
        list($response) = $this->revokeOAuth2TokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation revokeOAuth2TokenWithHttpInfo
     *
     * Revoke OAuth2 tokens
     *
     * Client for keto
     *
     * @param string $token  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeOAuth2TokenWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling revokeOAuth2Token');
        }
        // parse inputs
        $resourcePath = "/oauth2/revoke";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/revoke'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOAuth2Client
     *
     * Update an OAuth 2.0 Client
     *
     * Client for keto
     *
     * @param string $id  (required)
     * @param \keto\SDK\Model\OAuth2Client $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\OAuth2Client
     */
    public function updateOAuth2Client($id, $body)
    {
        list($response) = $this->updateOAuth2ClientWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateOAuth2ClientWithHttpInfo
     *
     * Update an OAuth 2.0 Client
     *
     * Client for keto
     *
     * @param string $id  (required)
     * @param \keto\SDK\Model\OAuth2Client $body  (required)
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOAuth2ClientWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateOAuth2Client');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\OAuth2Client',
                '/clients/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userinfo
     *
     * OpenID Connect Userinfo
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\SwaggeruserinfoResponsePayload
     */
    public function userinfo()
    {
        list($response) = $this->userinfoWithHttpInfo();
        return $response;
    }

    /**
     * Operation userinfoWithHttpInfo
     *
     * OpenID Connect Userinfo
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\SwaggeruserinfoResponsePayload, HTTP status code, HTTP response headers (array of strings)
     */
    public function userinfoWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/userinfo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\SwaggeruserinfoResponsePayload',
                '/userinfo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\SwaggeruserinfoResponsePayload', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\SwaggeruserinfoResponsePayload', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation wellKnown
     *
     * Get list of well known JSON Web Keys
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return \keto\SDK\Model\JsonWebKeySet
     */
    public function wellKnown()
    {
        list($response) = $this->wellKnownWithHttpInfo();
        return $response;
    }

    /**
     * Operation wellKnownWithHttpInfo
     *
     * Get list of well known JSON Web Keys
     *
     * Client for keto
     *
     * @throws \keto\SDK\ApiException on non-2xx response
     * @return array of \keto\SDK\Model\JsonWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function wellKnownWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/.well-known/jwks.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\keto\SDK\Model\JsonWebKeySet',
                '/.well-known/jwks.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\keto\SDK\Model\JsonWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\JsonWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\keto\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
