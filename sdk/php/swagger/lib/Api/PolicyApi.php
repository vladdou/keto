<?php
/**
 * PolicyApi
 * PHP version 5
 *
 * @category Class
 * @package  hades\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Package main ORY Hades
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace hades\SDK\Api;

use \hades\SDK\ApiClient;
use \hades\SDK\ApiException;
use \hades\SDK\Configuration;
use \hades\SDK\ObjectSerializer;

/**
 * PolicyApi Class Doc Comment
 *
 * @category Class
 * @package  hades\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PolicyApi
{
    /**
     * API Client
     *
     * @var \hades\SDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \hades\SDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\hades\SDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \hades\SDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \hades\SDK\ApiClient $apiClient set the API client
     *
     * @return PolicyApi
     */
    public function setApiClient(\hades\SDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPolicy
     *
     * Client for hades
     *
     * @param \hades\SDK\Model\Policy $body  (optional)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return \hades\SDK\Model\Policy
     */
    public function createPolicy($body = null)
    {
        list($response) = $this->createPolicyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createPolicyWithHttpInfo
     *
     * Client for hades
     *
     * @param \hades\SDK\Model\Policy $body  (optional)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return array of \hades\SDK\Model\Policy, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPolicyWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/policies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\hades\SDK\Model\Policy',
                '/policies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\hades\SDK\Model\Policy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\Policy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePolicy
     *
     * Client for hades
     *
     * @param string $id The id of the policy. (required)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deletePolicy($id)
    {
        list($response) = $this->deletePolicyWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deletePolicyWithHttpInfo
     *
     * Client for hades
     *
     * @param string $id The id of the policy. (required)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePolicyWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deletePolicy');
        }
        // parse inputs
        $resourcePath = "/policies/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/policies/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPolicy
     *
     * Client for hades
     *
     * @param string $id The id of the policy. (required)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return \hades\SDK\Model\Policy
     */
    public function getPolicy($id)
    {
        list($response) = $this->getPolicyWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getPolicyWithHttpInfo
     *
     * Client for hades
     *
     * @param string $id The id of the policy. (required)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return array of \hades\SDK\Model\Policy, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPolicyWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getPolicy');
        }
        // parse inputs
        $resourcePath = "/policies/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\hades\SDK\Model\Policy',
                '/policies/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\hades\SDK\Model\Policy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\Policy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPolicies
     *
     * Client for hades
     *
     * @param int $offset The offset from where to start looking. (optional)
     * @param int $limit The maximum amount of policies returned. (optional)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return \hades\SDK\Model\Policy[]
     */
    public function listPolicies($offset = null, $limit = null)
    {
        list($response) = $this->listPoliciesWithHttpInfo($offset, $limit);
        return $response;
    }

    /**
     * Operation listPoliciesWithHttpInfo
     *
     * Client for hades
     *
     * @param int $offset The offset from where to start looking. (optional)
     * @param int $limit The maximum amount of policies returned. (optional)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return array of \hades\SDK\Model\Policy[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listPoliciesWithHttpInfo($offset = null, $limit = null)
    {
        // parse inputs
        $resourcePath = "/policies";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\hades\SDK\Model\Policy[]',
                '/policies'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\hades\SDK\Model\Policy[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\Policy[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePolicy
     *
     * Client for hades
     *
     * @param string $id The id of the policy. (required)
     * @param \hades\SDK\Model\Policy $body  (optional)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return \hades\SDK\Model\Policy
     */
    public function updatePolicy($id, $body = null)
    {
        list($response) = $this->updatePolicyWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updatePolicyWithHttpInfo
     *
     * Client for hades
     *
     * @param string $id The id of the policy. (required)
     * @param \hades\SDK\Model\Policy $body  (optional)
     * @throws \hades\SDK\ApiException on non-2xx response
     * @return array of \hades\SDK\Model\Policy, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePolicyWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updatePolicy');
        }
        // parse inputs
        $resourcePath = "/policies/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\hades\SDK\Model\Policy',
                '/policies/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\hades\SDK\Model\Policy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\Policy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\hades\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
